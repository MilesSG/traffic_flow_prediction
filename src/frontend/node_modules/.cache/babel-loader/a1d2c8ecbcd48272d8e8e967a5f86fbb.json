{"ast":null,"code":"// 生成基于时间的流量模式\nconst getBaseTraffic = (hour, isWeekend = false) => {\n  // 早高峰 7-9点\n  const morningPeak = hour >= 7 && hour <= 9;\n  // 晚高峰 17-19点\n  const eveningPeak = hour >= 17 && hour <= 19;\n  let baseTraffic = 500; // 基础流量\n\n  if (morningPeak) {\n    baseTraffic = 1200;\n  } else if (eveningPeak) {\n    baseTraffic = 1500;\n  } else if (hour >= 10 && hour <= 16) {\n    baseTraffic = 800; // 工作时间\n  } else if (hour >= 23 || hour <= 5) {\n    baseTraffic = 200; // 夜间时段\n  }\n\n  // 周末流量降低\n  if (isWeekend) {\n    baseTraffic *= 0.7;\n  }\n  return baseTraffic;\n};\n\n// 生成模拟交通数据\nexport const generateTrafficData = count => {\n  const timestamps = [];\n  const values = [];\n  const now = new Date();\n  now.setHours(now.getHours() - count + 1);\n  for (let i = 0; i < count; i++) {\n    const timestamp = new Date(now.getTime() + i * 60 * 60 * 1000);\n    const isWeekend = timestamp.getDay() === 0 || timestamp.getDay() === 6;\n    let value = getBaseTraffic(timestamp.getHours(), isWeekend);\n\n    // 添加随机波动 (-10% 到 +10%)\n    const fluctuation = 1 + (Math.random() * 0.2 - 0.1);\n    value *= fluctuation;\n\n    // 添加长期趋势（每天增长0.5%）\n    const daysSinceStart = i / 24;\n    value *= 1 + daysSinceStart * 0.005;\n    timestamps.push(timestamp.toISOString());\n    values.push(Math.round(value));\n  }\n  return {\n    timestamps,\n    values\n  };\n};\n\n// 预测下一小时的交通流量\nexport const predictNextHour = data => {\n  const lastTimestamp = new Date(data.timestamps[data.timestamps.length - 1]);\n  const nextHour = new Date(lastTimestamp.getTime() + 60 * 60 * 1000);\n  const isWeekend = nextHour.getDay() === 0 || nextHour.getDay() === 6;\n  let predictedValue = getBaseTraffic(nextHour.getHours(), isWeekend);\n\n  // 考虑最近的趋势\n  const recentValues = data.values.slice(-3);\n  const trend = (recentValues[2] - recentValues[0]) / 2;\n  predictedValue += trend * 0.5;\n\n  // 添加随机波动\n  const fluctuation = 1 + (Math.random() * 0.1 - 0.05);\n  predictedValue *= fluctuation;\n  return {\n    timestamp: nextHour.toISOString(),\n    predicted_value: Math.round(predictedValue)\n  };\n};\n\n// 计算统计信息\nexport const calculateStats = data => {\n  const values = data.values;\n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const max = Math.max(...values);\n  const min = Math.min(...values);\n\n  // 计算标准差\n  const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\n  const std = Math.sqrt(variance);\n\n  // 计算每小时趋势\n  const hourlyTrend = {};\n  data.timestamps.forEach((timestamp, index) => {\n    const hour = new Date(timestamp).getHours();\n    if (!hourlyTrend[hour]) {\n      hourlyTrend[hour] = [];\n    }\n    hourlyTrend[hour].push(values[index]);\n  });\n  const hourlyAverages = {};\n  Object.keys(hourlyTrend).forEach(hour => {\n    const hourValues = hourlyTrend[hour];\n    hourlyAverages[hour] = hourValues.reduce((a, b) => a + b, 0) / hourValues.length;\n  });\n\n  // 计算24小时变化率\n  const last24hChange = values.length >= 24 ? (values[values.length - 1] - values[values.length - 24]) / values[values.length - 24] * 100 : 0;\n  return {\n    mean,\n    max,\n    min,\n    std,\n    peak_hour: parseInt(Object.entries(hourlyAverages).reduce((a, b) => a[1] > b[1] ? a : b)[0]),\n    off_peak_hour: parseInt(Object.entries(hourlyAverages).reduce((a, b) => a[1] < b[1] ? a : b)[0]),\n    hourly_trend: hourlyAverages,\n    last_24h_change: last24hChange\n  };\n};\n\n// 计算分析信息\nexport const calculateAnalysis = data => {\n  const weekdayValues = [];\n  const weekendValues = [];\n  const morningPeakValues = [];\n  const eveningPeakValues = [];\n  data.timestamps.forEach((timestamp, index) => {\n    const date = new Date(timestamp);\n    const hour = date.getHours();\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n    const value = data.values[index];\n    if (isWeekend) {\n      weekendValues.push(value);\n    } else {\n      weekdayValues.push(value);\n    }\n    if (hour >= 7 && hour <= 9) {\n      morningPeakValues.push(value);\n    } else if (hour >= 17 && hour <= 19) {\n      eveningPeakValues.push(value);\n    }\n  });\n  const weekday_avg = weekdayValues.reduce((a, b) => a + b, 0) / weekdayValues.length;\n  const weekend_avg = weekendValues.reduce((a, b) => a + b, 0) / weekendValues.length;\n  const morning_peak_avg = morningPeakValues.reduce((a, b) => a + b, 0) / morningPeakValues.length;\n  const evening_peak_avg = eveningPeakValues.reduce((a, b) => a + b, 0) / eveningPeakValues.length;\n  const peak_ratio = Math.max(morning_peak_avg, evening_peak_avg) / Math.min(morning_peak_avg, evening_peak_avg);\n  let daily_pattern = \"双高峰模式\";\n  if (morning_peak_avg > evening_peak_avg * 1.2) {\n    daily_pattern = \"早高峰主导\";\n  } else if (evening_peak_avg > morning_peak_avg * 1.2) {\n    daily_pattern = \"晚高峰主导\";\n  }\n  return {\n    weekday_avg,\n    weekend_avg,\n    morning_peak_avg,\n    evening_peak_avg,\n    peak_ratio,\n    daily_pattern\n  };\n};","map":{"version":3,"names":["getBaseTraffic","hour","isWeekend","morningPeak","eveningPeak","baseTraffic","generateTrafficData","count","timestamps","values","now","Date","setHours","getHours","i","timestamp","getTime","getDay","value","fluctuation","Math","random","daysSinceStart","push","toISOString","round","predictNextHour","data","lastTimestamp","length","nextHour","predictedValue","recentValues","slice","trend","predicted_value","calculateStats","mean","reduce","a","b","max","min","variance","pow","std","sqrt","hourlyTrend","forEach","index","hourlyAverages","Object","keys","hourValues","last24hChange","peak_hour","parseInt","entries","off_peak_hour","hourly_trend","last_24h_change","calculateAnalysis","weekdayValues","weekendValues","morningPeakValues","eveningPeakValues","date","weekday_avg","weekend_avg","morning_peak_avg","evening_peak_avg","peak_ratio","daily_pattern"],"sources":["D:/Thesis_Revision/Projects_Code/traffic_flow_prediction/src/frontend/src/utils/trafficUtils.ts"],"sourcesContent":["interface TrafficData {\r\n  timestamps: string[];\r\n  values: number[];\r\n}\r\n\r\ninterface PredictionData {\r\n  timestamp: string;\r\n  predicted_value: number;\r\n}\r\n\r\ninterface Stats {\r\n  mean: number;\r\n  max: number;\r\n  min: number;\r\n  std: number;\r\n  peak_hour: number;\r\n  off_peak_hour: number;\r\n  hourly_trend: Record<string, number>;\r\n  last_24h_change: number;\r\n}\r\n\r\ninterface Analysis {\r\n  weekday_avg: number;\r\n  weekend_avg: number;\r\n  morning_peak_avg: number;\r\n  evening_peak_avg: number;\r\n  peak_ratio: number;\r\n  daily_pattern: string;\r\n}\r\n\r\n// 生成基于时间的流量模式\r\nconst getBaseTraffic = (hour: number, isWeekend: boolean = false): number => {\r\n  // 早高峰 7-9点\r\n  const morningPeak = hour >= 7 && hour <= 9;\r\n  // 晚高峰 17-19点\r\n  const eveningPeak = hour >= 17 && hour <= 19;\r\n  \r\n  let baseTraffic = 500; // 基础流量\r\n  \r\n  if (morningPeak) {\r\n    baseTraffic = 1200;\r\n  } else if (eveningPeak) {\r\n    baseTraffic = 1500;\r\n  } else if (hour >= 10 && hour <= 16) {\r\n    baseTraffic = 800; // 工作时间\r\n  } else if (hour >= 23 || hour <= 5) {\r\n    baseTraffic = 200; // 夜间时段\r\n  }\r\n  \r\n  // 周末流量降低\r\n  if (isWeekend) {\r\n    baseTraffic *= 0.7;\r\n  }\r\n  \r\n  return baseTraffic;\r\n};\r\n\r\n// 生成模拟交通数据\r\nexport const generateTrafficData = (count: number): TrafficData => {\r\n  const timestamps: string[] = [];\r\n  const values: number[] = [];\r\n  \r\n  const now = new Date();\r\n  now.setHours(now.getHours() - count + 1);\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const timestamp = new Date(now.getTime() + i * 60 * 60 * 1000);\r\n    const isWeekend = timestamp.getDay() === 0 || timestamp.getDay() === 6;\r\n    \r\n    let value = getBaseTraffic(timestamp.getHours(), isWeekend);\r\n    \r\n    // 添加随机波动 (-10% 到 +10%)\r\n    const fluctuation = 1 + (Math.random() * 0.2 - 0.1);\r\n    value *= fluctuation;\r\n    \r\n    // 添加长期趋势（每天增长0.5%）\r\n    const daysSinceStart = i / 24;\r\n    value *= (1 + daysSinceStart * 0.005);\r\n    \r\n    timestamps.push(timestamp.toISOString());\r\n    values.push(Math.round(value));\r\n  }\r\n  \r\n  return { timestamps, values };\r\n};\r\n\r\n// 预测下一小时的交通流量\r\nexport const predictNextHour = (data: TrafficData): PredictionData => {\r\n  const lastTimestamp = new Date(data.timestamps[data.timestamps.length - 1]);\r\n  const nextHour = new Date(lastTimestamp.getTime() + 60 * 60 * 1000);\r\n  \r\n  const isWeekend = nextHour.getDay() === 0 || nextHour.getDay() === 6;\r\n  let predictedValue = getBaseTraffic(nextHour.getHours(), isWeekend);\r\n  \r\n  // 考虑最近的趋势\r\n  const recentValues = data.values.slice(-3);\r\n  const trend = (recentValues[2] - recentValues[0]) / 2;\r\n  predictedValue += trend * 0.5;\r\n  \r\n  // 添加随机波动\r\n  const fluctuation = 1 + (Math.random() * 0.1 - 0.05);\r\n  predictedValue *= fluctuation;\r\n  \r\n  return {\r\n    timestamp: nextHour.toISOString(),\r\n    predicted_value: Math.round(predictedValue)\r\n  };\r\n};\r\n\r\n// 计算统计信息\r\nexport const calculateStats = (data: TrafficData): Stats => {\r\n  const values = data.values;\r\n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\r\n  const max = Math.max(...values);\r\n  const min = Math.min(...values);\r\n  \r\n  // 计算标准差\r\n  const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\r\n  const std = Math.sqrt(variance);\r\n  \r\n  // 计算每小时趋势\r\n  const hourlyTrend: Record<string, number[]> = {};\r\n  data.timestamps.forEach((timestamp, index) => {\r\n    const hour = new Date(timestamp).getHours();\r\n    if (!hourlyTrend[hour]) {\r\n      hourlyTrend[hour] = [];\r\n    }\r\n    hourlyTrend[hour].push(values[index]);\r\n  });\r\n  \r\n  const hourlyAverages: Record<string, number> = {};\r\n  Object.keys(hourlyTrend).forEach(hour => {\r\n    const hourValues = hourlyTrend[hour];\r\n    hourlyAverages[hour] = hourValues.reduce((a, b) => a + b, 0) / hourValues.length;\r\n  });\r\n  \r\n  // 计算24小时变化率\r\n  const last24hChange = values.length >= 24 \r\n    ? ((values[values.length - 1] - values[values.length - 24]) / values[values.length - 24]) * 100\r\n    : 0;\r\n  \r\n  return {\r\n    mean,\r\n    max,\r\n    min,\r\n    std,\r\n    peak_hour: parseInt(Object.entries(hourlyAverages).reduce((a, b) => a[1] > b[1] ? a : b)[0]),\r\n    off_peak_hour: parseInt(Object.entries(hourlyAverages).reduce((a, b) => a[1] < b[1] ? a : b)[0]),\r\n    hourly_trend: hourlyAverages,\r\n    last_24h_change: last24hChange\r\n  };\r\n};\r\n\r\n// 计算分析信息\r\nexport const calculateAnalysis = (data: TrafficData): Analysis => {\r\n  const weekdayValues: number[] = [];\r\n  const weekendValues: number[] = [];\r\n  const morningPeakValues: number[] = [];\r\n  const eveningPeakValues: number[] = [];\r\n  \r\n  data.timestamps.forEach((timestamp, index) => {\r\n    const date = new Date(timestamp);\r\n    const hour = date.getHours();\r\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\r\n    const value = data.values[index];\r\n    \r\n    if (isWeekend) {\r\n      weekendValues.push(value);\r\n    } else {\r\n      weekdayValues.push(value);\r\n    }\r\n    \r\n    if (hour >= 7 && hour <= 9) {\r\n      morningPeakValues.push(value);\r\n    } else if (hour >= 17 && hour <= 19) {\r\n      eveningPeakValues.push(value);\r\n    }\r\n  });\r\n  \r\n  const weekday_avg = weekdayValues.reduce((a, b) => a + b, 0) / weekdayValues.length;\r\n  const weekend_avg = weekendValues.reduce((a, b) => a + b, 0) / weekendValues.length;\r\n  const morning_peak_avg = morningPeakValues.reduce((a, b) => a + b, 0) / morningPeakValues.length;\r\n  const evening_peak_avg = eveningPeakValues.reduce((a, b) => a + b, 0) / eveningPeakValues.length;\r\n  \r\n  const peak_ratio = Math.max(morning_peak_avg, evening_peak_avg) / Math.min(morning_peak_avg, evening_peak_avg);\r\n  \r\n  let daily_pattern = \"双高峰模式\";\r\n  if (morning_peak_avg > evening_peak_avg * 1.2) {\r\n    daily_pattern = \"早高峰主导\";\r\n  } else if (evening_peak_avg > morning_peak_avg * 1.2) {\r\n    daily_pattern = \"晚高峰主导\";\r\n  }\r\n  \r\n  return {\r\n    weekday_avg,\r\n    weekend_avg,\r\n    morning_peak_avg,\r\n    evening_peak_avg,\r\n    peak_ratio,\r\n    daily_pattern\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}